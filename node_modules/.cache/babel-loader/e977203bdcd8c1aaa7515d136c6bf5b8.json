{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TI\\\\thinkful\\\\assignments\\\\Project_Flashcards_Qualified_1\\\\src\\\\home\\\\DeckList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { listDecks, deleteDeck } from \"../utils/api/index.js\";\nimport DeckSnapshot from \"./DeckSnapshot\";\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DeckList = () => {\n  _s();\n\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n    listDecks(abortController.signal).then(setDecks);\n    return () => abortController.abort();\n  }, []);\n\n  const deleteHandler = async deckId => {\n    const result = window.confirm(\"Delete this deck? You will not be able to recover it.\");\n\n    if (result) {\n      await deleteDeck(deckId);\n      const newDecks = await listDecks();\n      setDecks(newDecks);\n      history.push(\"/\");\n    }\n  };\n\n  const list = decks.map(deck => /*#__PURE__*/_jsxDEV(DeckSnapshot, {\n    deckId: deck.id,\n    name: deck.name,\n    description: deck.description,\n    amount: deck.cards.length,\n    deleteHandler: deleteHandler\n  }, deck.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: true,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: true,\n          children: list\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary btn-sm mt-2\",\n          onClick: () => history.push(`/decks/new`),\n          children: \"+Create Deck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DeckList, \"G11efxXmh2SE3Q3tr6boo37MplY=\", false, function () {\n  return [useHistory];\n});\n\n_c = DeckList;\nexport default DeckList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeckList\");","map":{"version":3,"sources":["C:/Users/TI/thinkful/assignments/Project_Flashcards_Qualified_1/src/home/DeckList.js"],"names":["React","useEffect","useState","listDecks","deleteDeck","DeckSnapshot","useHistory","DeckList","decks","setDecks","history","abortController","AbortController","signal","then","abort","deleteHandler","deckId","result","window","confirm","newDecks","push","list","map","deck","id","name","description","cards","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,uBAAtC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMQ,OAAO,GAAGJ,UAAU,EAA1B;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AAEAT,IAAAA,SAAS,CAACQ,eAAe,CAACE,MAAjB,CAAT,CAAkCC,IAAlC,CAAuCL,QAAvC;AAEA,WAAO,MAAME,eAAe,CAACI,KAAhB,EAAb;AACD,GANQ,EAMN,EANM,CAAT;;AAQA,QAAMC,aAAa,GAAG,MAAOC,MAAP,IAAkB;AACtC,UAAMC,MAAM,GAAGC,MAAM,CAACC,OAAP,CACb,uDADa,CAAf;;AAGA,QAAIF,MAAJ,EAAY;AACV,YAAMd,UAAU,CAACa,MAAD,CAAhB;AACA,YAAMI,QAAQ,GAAG,MAAMlB,SAAS,EAAhC;AACAM,MAAAA,QAAQ,CAACY,QAAD,CAAR;AACAX,MAAAA,OAAO,CAACY,IAAR,CAAa,GAAb;AACD;AACF,GAVD;;AAYA,QAAMC,IAAI,GAAGf,KAAK,CAACgB,GAAN,CAAWC,IAAD,iBACrB,QAAC,YAAD;AAEE,IAAA,MAAM,EAAEA,IAAI,CAACC,EAFf;AAGE,IAAA,IAAI,EAAED,IAAI,CAACE,IAHb;AAIE,IAAA,WAAW,EAAEF,IAAI,CAACG,WAJpB;AAKE,IAAA,MAAM,EAAEH,IAAI,CAACI,KAAL,CAAWC,MALrB;AAME,IAAA,aAAa,EAAEd;AANjB,KACOS,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,UADW,CAAb;AAWA,sBACE;AAAA,2BACE;AAAA,6BACE;AAAK,QAAA,SAAS,MAAd;AAAA,gCACE;AAAK,UAAA,SAAS,MAAd;AAAA,oBAAgBH;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,SAAS,EAAC,+BADZ;AAEE,UAAA,OAAO,EAAE,MAAMb,OAAO,CAACY,IAAR,CAAc,YAAd,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAlDM;;GAAMf,Q;UAEKD,U;;;KAFLC,Q;AAoDb,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { listDecks, deleteDeck } from \"../utils/api/index.js\";\r\nimport DeckSnapshot from \"./DeckSnapshot\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const DeckList = () => {\r\n  const [decks, setDecks] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    listDecks(abortController.signal).then(setDecks);\r\n\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  const deleteHandler = async (deckId) => {\r\n    const result = window.confirm(\r\n      \"Delete this deck? You will not be able to recover it.\"\r\n    );\r\n    if (result) {\r\n      await deleteDeck(deckId);\r\n      const newDecks = await listDecks();\r\n      setDecks(newDecks);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const list = decks.map((deck) => (\r\n    <DeckSnapshot\r\n      key={deck.id}\r\n      deckId={deck.id}\r\n      name={deck.name}\r\n      description={deck.description}\r\n      amount={deck.cards.length}\r\n      deleteHandler={deleteHandler}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <main>\r\n      <section>\r\n        <div className>\r\n          <div className>{list}</div>\r\n          <button\r\n            className=\"btn btn-secondary btn-sm mt-2\"\r\n            onClick={() => history.push(`/decks/new`)}\r\n          >\r\n            +Create Deck\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DeckList;"]},"metadata":{},"sourceType":"module"}