{"ast":null,"code":"/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\n\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\n\nfunction stripCards(deck) {\n  const {\n    cards,\n    ...deckWithoutCards\n  } = deck;\n  return deckWithoutCards;\n}\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  default value returned if the fetch is cancelled.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\n\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n\n    return Promise.resolve(onCancel);\n  }\n}\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\n\n\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, {\n    signal\n  }, []);\n}\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\n\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal\n  };\n  return await fetchJson(url, options, {});\n}\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\n\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, {\n    signal\n  }, {});\n}\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\n\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\n\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\n\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, {\n    signal\n  }, []);\n}\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\n\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal\n  };\n  return await fetchJson(url, options, card);\n}\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\n\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, {\n    signal\n  }, {});\n}\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\n\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard)\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\n\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = {\n    method: \"DELETE\",\n    signal\n  };\n  return await fetchJson(url, options);\n}","map":{"version":3,"sources":["C:/Users/TI/Thinkful/qualified-challenges/project-flashcards/src/utils/api/index.js"],"names":["API_BASE_URL","process","env","headers","Headers","append","stripCards","deck","cards","deckWithoutCards","fetchJson","url","options","onCancel","response","fetch","status","Error","statusText","json","error","name","console","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","listCards","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard"],"mappings":"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","sourcesContent":["/**\r\n * Defines the base URL for the API.\r\n * The default values is overridden by the `API_BASE_URL` environment variable.\r\n */\r\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\r\n\r\n/**\r\n * Defines the default headers for these functions to work with `json-server`\r\n */\r\nconst headers = new Headers();\r\nheaders.append(\"Content-Type\", \"application/json\");\r\n\r\n/**\r\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param deck\r\n *  the deck instance\r\n * @returns {*}\r\n *  a copy of the deck instance with the `cards` property removed.\r\n */\r\nfunction stripCards(deck) {\r\n  const { cards, ...deckWithoutCards } = deck;\r\n  return deckWithoutCards;\r\n}\r\n\r\n/**\r\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\r\n *\r\n * This function is NOT exported because it is not needed outside of this file.\r\n *\r\n * @param url\r\n *  the url for the requst.\r\n * @param options\r\n *  any options for fetch\r\n * @param onCancel\r\n *  default value returned if the fetch is cancelled.\r\n * @returns {Promise<Error|any>}\r\n *  a promise that resolves to the `json` data or an error.\r\n *  If the response is not in the 200 - 399 range the promise is rejected.\r\n */\r\n\r\nasync function fetchJson(url, options, onCancel) {\r\n  try {\r\n    const response = await fetch(url, options);\r\n\r\n    if (response.status < 200 || response.status > 399) {\r\n      throw new Error(`${response.status} - ${response.statusText}`);\r\n    }\r\n\r\n    if (response.status === 204) {\r\n      return null;\r\n    }\r\n\r\n    return await response.json();\r\n\r\n  } catch (error) {\r\n    if (error.name !== \"AbortError\") {\r\n      console.error(error.stack);\r\n      throw error;\r\n    }\r\n    return Promise.resolve(onCancel);\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieves all existing decks.\r\n * @returns {Promise<[deck]>}\r\n *  a promise that resolves to a possibly empty array of decks saved in the database.\r\n */\r\nexport async function listDecks(signal) {\r\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Saves deck to the database (public/data/db.json).\r\n * There is no validation done on the deck object, any object will be saved.\r\n * @param deck\r\n *  the deck to save, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<deck>}\r\n *  a promise that resolves the saved deck, which will now have an `id` property.\r\n */\r\nexport async function createDeck(deck, signal) {\r\n  const url = `${API_BASE_URL}/decks`;\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(deck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, {});\r\n}\r\n\r\n/**\r\n * Retrieves the deck with the specified `deckId`\r\n * @param deckId\r\n *  the `id` property matching the desired deck.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<any>}\r\n *  a promise that resolves to the saved deck.\r\n */\r\nexport async function readDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedDeck\r\n *  the deck to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated deck.\r\n */\r\nexport async function updateDeck(updatedDeck, signal) {\r\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(stripCards(updatedDeck)),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, updatedDeck);\r\n}\r\n\r\n/**\r\n * Deletes the deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the deck to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteDeck(deckId, signal) {\r\n  const url = `${API_BASE_URL}/decks/${deckId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n\r\n/**\r\n * Retrieves all cards associated with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to a possible empty array of cards.\r\n */\r\nexport async function listCards(deckId, signal) {\r\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\r\n  return await fetchJson(url, { signal }, []);\r\n}\r\n\r\n/**\r\n * Creates a new card associated with the specified `deckId`.\r\n * There is no validation that there is an existing deck with the specified `deckId`.\r\n * @param deckId\r\n *  the id of the target deck\r\n * @param card\r\n *  the card to create, which must not have an `id` property\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the new card, which will have an `id` property.\r\n */\r\nexport async function createCard(deckId, card, signal) {\r\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\r\n  // and the card is not related to the deck because the data types of the ID's are different.\r\n  const url = `${API_BASE_URL}/cards`;\r\n  card.deckId = Number(deckId);\r\n  const options = {\r\n    method: \"POST\",\r\n    headers,\r\n    body: JSON.stringify(card),\r\n    signal,\r\n  };\r\n  return await fetchJson(url, options, card);\r\n}\r\n\r\n/**\r\n * Retrieves the card with the specified `cardId`\r\n * @param cardId\r\n *  the id of the target\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the saved card.\r\n */\r\nexport async function readCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  return await fetchJson(url, { signal }, {});\r\n}\r\n\r\n/**\r\n * Updates an existing deck\r\n * @param updatedCard\r\n *  the card to save, which must have an `id` property.\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to the updated card.\r\n */\r\nexport async function updateCard(updatedCard, signal) {\r\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\r\n  const options = {\r\n    method: \"PUT\",\r\n    headers,\r\n    body: JSON.stringify(updatedCard),\r\n  };\r\n  return await fetchJson(url, options, updatedCard);\r\n}\r\n\r\n/**\r\n * Deletes the card with the specified `cardId`.\r\n * @param cardId\r\n *  the id of the card to delete\r\n * @param signal\r\n *  optional AbortController.signal\r\n * @returns {Promise<Error|*>}\r\n *  a promise that resolves to an empty object.\r\n */\r\nexport async function deleteCard(cardId, signal) {\r\n  const url = `${API_BASE_URL}/cards/${cardId}`;\r\n  const options = { method: \"DELETE\", signal };\r\n  return await fetchJson(url, options);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}