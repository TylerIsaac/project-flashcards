{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TI\\\\thinkful\\\\assignments\\\\Project_Flashcards_Qualified_1\\\\src\\\\study\\\\Study.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, Link, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index.js\";\nimport StudyCardFront from \"./StudyCardFront\";\nimport StudyCardBack from \"./StudyCardBack\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Study = () => {\n  _s();\n\n  const [deck, setDeck] = useState([]);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [showFront, setShowFront] = useState(true);\n  const {\n    deckId\n  } = useParams();\n  const history = useHistory();\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck);\n    return () => abortController.abort();\n  }, [deckId]);\n\n  const nextCard = () => {\n    if (currentCardIndex < deck.cards.length - 1) {\n      setCurrentCardIndex(currentValue => currentValue + 1);\n      setShowFront(true);\n    } else {\n      handleRestart();\n    }\n  };\n\n  const handleRestart = () => {\n    const result = window.confirm(\"Restart cards? Click 'cancel' to return to the home page.\");\n\n    if (result) {\n      setCurrentCardIndex(0);\n      setShowFront(true);\n    } else {\n      history.push(\"/\");\n    }\n  };\n\n  const flipCard = () => {\n    setShowFront(currentValue => !currentValue);\n  };\n\n  if (deck.name) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"breadcrumb\",\n        children: [/*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), \" / \", /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deckId}`,\n          children: deck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), \" / \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          children: deck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), \" : Study\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: deck.cards.length <= 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Not enough cards.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"You need at least 3 cards to study. There are \", deck.cards.length, \" \", \"cards in this deck\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => history.push(`/decks/${deckId}/cards/new`),\n            children: \"Add Cards\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Card \", currentCardIndex + 1, \" of \", deck.cards.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 21\n            }, this), showFront ? /*#__PURE__*/_jsxDEV(StudyCardFront, {\n              currentCard: deck.cards[currentCardIndex],\n              flipCard: flipCard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(StudyCardBack, {\n              currentCard: deck.cards[currentCardIndex],\n              flipCard: flipCard,\n              nextCard: nextCard\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  }\n};\n\n_s(Study, \"PM8xDlNr8/rlJBcE8Aeb1dTI0SM=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = Study;\nexport default Study;\n\nvar _c;\n\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"sources":["C:/Users/TI/thinkful/assignments/Project_Flashcards_Qualified_1/src/study/Study.js"],"names":["React","useEffect","useState","useParams","Link","useHistory","readDeck","StudyCardFront","StudyCardBack","Study","deck","setDeck","currentCardIndex","setCurrentCardIndex","showFront","setShowFront","deckId","history","abortController","AbortController","signal","then","abort","nextCard","cards","length","currentValue","handleRestart","result","window","confirm","push","flipCard","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api/index.js\";\r\nimport StudyCardFront from \"./StudyCardFront\";\r\nimport StudyCardBack from \"./StudyCardBack\";\r\n\r\nexport const Study = () => {\r\n  const [deck, setDeck] = useState([]);\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n  const [showFront, setShowFront] = useState(true);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const nextCard = () => {\r\n    if (currentCardIndex < deck.cards.length - 1) {\r\n      setCurrentCardIndex((currentValue) => currentValue + 1);\r\n      setShowFront(true);\r\n    } else {\r\n      handleRestart();\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    const result = window.confirm(\r\n      \"Restart cards? Click 'cancel' to return to the home page.\"\r\n    );\r\n    if (result) {\r\n      setCurrentCardIndex(0);\r\n      setShowFront(true);\r\n    } else {\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const flipCard = () => {\r\n    setShowFront((currentValue) => !currentValue);\r\n  };\r\n\r\n  if (deck.name) {\r\n    return (\r\n      <section className=\"container\">\r\n        <nav className=\"breadcrumb\">\r\n          <Link to=\"/\">Home</Link>\r\n          {\" / \"}\r\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n          {\" / \"}\r\n          <span>Study</span>\r\n        </nav>\r\n        <h2>\r\n            <i>{deck.name}</i> : Study\r\n        </h2>\r\n        <div>\r\n            {deck.cards.length <= 2 ? (\r\n            <div>\r\n                <h3>Not enough cards.</h3>\r\n                <p>\r\n                You need at least 3 cards to study. There are {deck.cards.length}{\" \"}\r\n                cards in this deck\r\n                </p>\r\n                <button onClick={() => history.push(`/decks/${deckId}/cards/new`)}>\r\n                Add Cards\r\n                </button>\r\n            </div>\r\n            ) : (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h4>\r\n                    Card {currentCardIndex + 1} of {deck.cards.length}\r\n                    </h4>\r\n                    <hr></hr>\r\n                    {showFront ? (\r\n                    <StudyCardFront\r\n                        currentCard={deck.cards[currentCardIndex]}\r\n                        flipCard={flipCard}\r\n                    />\r\n                    ) : (\r\n                    <StudyCardBack\r\n                        currentCard={deck.cards[currentCardIndex]}\r\n                        flipCard={flipCard}\r\n                        nextCard={nextCard}\r\n                    />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )}\r\n        </div>\r\n      </section>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Study;"]},"metadata":{},"sourceType":"module"}