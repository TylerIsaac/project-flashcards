{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","home/DeckSnapshot.js","home/DeckList.js","home/DeckCreate.js","study/StudyCardFront.js","study/StudyCardBack.js","study/Study.js","deck/CardList.js","deck/DeckView.js","deck/EditDeck.js","deck/CardForm.js","deck/AddCard.js","deck/EditCard.js","deck/DeckIndex.js","Layout/Footer.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","cardId","updateCard","updatedCard","deleteCard","append","DeckSnapshot","description","amount","deleteHandler","history","useHistory","onClick","push","DeckList","useState","decks","setDecks","useEffect","abortController","AbortController","then","abort","window","confirm","newDecks","list","map","length","DeckCreate","setDeck","changeHandler","event","target","value","submitHandler","preventDefault","to","onSubmit","htmlFor","type","required","maxLength","onChange","rows","StudyCardFront","currentCard","flipCard","front","StudyCardBack","nextCard","back","Study","currentCardIndex","setCurrentCardIndex","showFront","setShowFront","useParams","handleRestart","currentValue","CardList","refreshDeck","cardDeleteHandler","DeckView","props","deckDeleteHandler","EditDeck","CardForm","isNewCard","AddCard","initialCardState","setCard","EditCard","readCard","DeckIndex","exact","path","Footer","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAaeA,MAXf,WACE,OACE,wBAAQC,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,+BACA,mBAAGA,UAAU,OAAb,sDCGOC,MARf,WACE,OACE,qBAAKD,UAAU,WAAf,SACE,8C,kDCDAE,EAAeC,mIAAYD,cAAgB,wBAK3CE,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OADA,YAAuCD,EAAvC,G,SAoBaE,E,kFAAf,WAAyBC,EAAKC,EAASC,GAAvC,eAAAC,EAAA,+EAE2BC,MAAMJ,EAAKC,GAFtC,aAEUI,EAFV,QAIiBC,OAAS,KAAOD,EAASC,OAAS,KAJnD,sBAKY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aALvD,UAQ4B,MAApBH,EAASC,OARjB,yCASa,MATb,wBAYiBD,EAASI,OAZ1B,8EAeuB,eAAf,KAAMC,KAfd,uBAgBMC,QAAQC,MAAM,KAAMC,OAhB1B,sCAmBWC,QAAQC,QAAQb,IAnB3B,2D,sBA4BO,SAAec,EAAtB,kC,4CAAO,WAAyBC,GAAzB,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,gCAEQO,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAeA,SAAeC,EAAtB,oC,4CAAO,WAA0BrB,EAAMoB,GAAhC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,UAECS,EAAU,CACdkB,OAAQ,OACRzB,UACA0B,KAAMC,KAAKC,UAAU1B,EAAWC,IAChCoB,UANG,SAQQlB,EAAUC,EAAKC,EAAS,IARhC,oF,sBAoBA,SAAesB,EAAtB,oC,4CAAO,WAAwBC,EAAQP,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,EADhC,0BAEQzB,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAcA,SAAeQ,EAAtB,oC,4CAAO,WAA0BC,EAAaT,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCkC,EAAYC,GAD5C,iBAEC1B,EAAU,CACdkB,OAAQ,MACRzB,UACA0B,KAAMC,KAAKC,UAAU1B,EAAW8B,IAChCT,UANG,SAQQlB,EAAUC,EAAKC,EAASyB,GARhC,oF,sBAoBA,SAAeE,EAAtB,oC,4CAAO,WAA0BJ,EAAQP,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,GAC/BvB,EAAU,CAAEkB,OAAQ,SAAUF,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,sBAgCA,SAAe4B,EAAtB,sC,4CAAO,WAA0BL,EAAQM,EAAMb,GAAxC,iBAAAd,EAAA,6DAGCH,EAHD,UAGUR,EAHV,UAILsC,EAAKN,OAASO,OAAOP,GACfvB,EAAU,CACdkB,OAAQ,OACRzB,UACA0B,KAAMC,KAAKC,UAAUQ,GACrBb,UATG,SAWQlB,EAAUC,EAAKC,EAAS6B,GAXhC,oF,kEAuBA,WAAwBE,EAAQf,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCwC,GADhC,SAEQjC,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAcA,SAAegB,EAAtB,oC,4CAAO,WAA0BC,EAAajB,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC0C,EAAYP,IAC3C1B,EAAU,CACdkB,OAAQ,MACRzB,UACA0B,KAAMC,KAAKC,UAAUY,IALlB,SAOQnC,EAAUC,EAAKC,EAASiC,GAPhC,oF,sBAmBA,SAAeC,EAAtB,oC,4CAAO,WAA0BH,EAAQf,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCwC,GAC/B/B,EAAU,CAAEkB,OAAQ,SAAUF,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,sBA1NPP,EAAQ0C,OAAO,eAAgB,oBCPxB,IAqCQC,EArCa,SAAC,GAMtB,IALLb,EAKI,EALJA,OACAd,EAII,EAJJA,KACA4B,EAGI,EAHJA,YACAC,EAEI,EAFJA,OACAC,EACI,EADJA,cAEMC,EAAUC,cAEhB,OACE,qBAAKpD,UAAU,OAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BoB,IAC5B,qBAAKpB,WAAS,EAAd,SACI,+BAAKiD,EAAL,cAEJ,mBAAGjD,UAAU,YAAb,SAA0BgD,IAC1B,wBACEhD,UAAU,2BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,KAFxC,kBAMA,wBACElC,UAAU,8BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,EAAvB,YAFjB,mBAMA,wBAAQlC,UAAU,6BAA6BqD,QAAS,kBAAMH,EAAchB,IAA5E,gCC0BOqB,EApDS,WACtB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACMP,EAAUC,cAEhBO,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAI5B,OAFAnC,EAAUkC,EAAgBjC,QAAQmC,KAAKJ,GAEhC,kBAAME,EAAgBG,WAC5B,IAEH,IAAMb,EAAa,uCAAG,WAAOhB,GAAP,eAAArB,EAAA,0DACLmD,OAAOC,QACpB,yDAFkB,gCAKZ3B,EAAWJ,GALC,uBAMKR,IANL,OAMZwC,EANY,OAOlBR,EAASQ,GACTf,EAAQG,KAAK,KARK,2CAAH,sDAYba,EAAOV,EAAMW,KAAI,SAAC7D,GAAD,OACrB,cAAC,EAAD,CAEE2B,OAAQ3B,EAAK8B,GACbjB,KAAMb,EAAKa,KACX4B,YAAazC,EAAKyC,YAClBC,OAAQ1C,EAAKC,MAAM6D,OACnBnB,cAAeA,GALV3C,EAAK8B,OASd,OACE,8BACE,kCACE,sBAAKrC,UAAU,YAAf,UACE,wBACEA,UAAU,gCACVqD,QAAS,kBAAMF,EAAQG,KAAR,eAFjB,0BAMA,qBAAKtD,WAAS,EAAd,SAAgBmE,Y,sBCgCXG,EA/EW,WACxB,IAIA,EAAwBd,mBAAS,eAJR,CACvBpC,KAAM,GACN4B,YAAa,MAEf,mBAAOzC,EAAP,KAAagE,EAAb,KACMpB,EAAUC,cAEVoB,EAAgB,SAACC,GACrBF,EAAQ,2BACHhE,GADE,kBAEJkE,EAAMC,OAAOtD,KAAOqD,EAAMC,OAAOC,UAIhCC,EAAa,uCAAG,WAAOH,GAAP,SAAA5D,EAAA,6DACpB4D,EAAMI,iBADc,SAEdjD,EAAWrB,GAFG,OAKpB4C,EAAQG,KAAK,KALO,2CAAH,sDAQnB,OACE,0BAAStD,UAAU,YAAnB,UACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,kDAEF,uBAAM9E,UAAU,YAAY+E,SAAUH,EAAtC,UACE,qBAAK5E,UAAU,MAAf,SACE,+CAEA,qCACE,qBAAKA,UAAU,MAAf,SACE,uBAAOgF,QAAQ,OAAf,qBAEF,qBAAKhF,UAAU,MAAf,SACE,uBACEA,UAAU,eACVqC,GAAG,OACHjB,KAAK,OACL6D,KAAK,OACLC,UAAU,EACVP,MAAOpE,EAAKa,KACZ+D,UAAU,MACVC,SAAUZ,MAGd,qBAAKxE,UAAU,WAAf,SACE,uBAAOgF,QAAQ,cAAf,4BAEF,qBAAKhF,UAAU,MAAf,SACE,0BACEA,UAAU,eACVqC,GAAG,cACHjB,KAAK,cACL8D,UAAU,EACVG,KAAK,IACLF,UAAU,MACVR,MAAOpE,EAAKyC,YACZoC,SAAUZ,MAGd,sBAAKxE,UAAU,WAAf,UACE,wBAAQA,UAAU,2BAA2BqD,QAAS,kBAAMF,EAAQG,KAAK,MAAzE,oBAGA,wBAAQtD,UAAU,8BAA8BiF,KAAK,SAArD,iCC1DCK,EAbe,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SAC5C,OACE,gCACE,8BACE,4BAAID,EAAYE,UAElB,wBAAQzF,UAAU,2BAA2BqD,QAAS,kBAAMmC,KAA5D,sBCYSE,EAlBc,SAAC,GAAyC,IAAvCH,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,SAAUG,EAAe,EAAfA,SACrD,OACE,gCACE,8BACE,4BAAIJ,EAAYK,SAElB,sBAAK5F,UAAU,YAAf,UACE,wBAAQA,UAAU,2BAA2BqD,QAAS,kBAAMmC,KAA5D,kBAGA,wBAAQxF,UAAU,8BAA8BqD,QAAS,kBAAMsC,KAA/D,yBCyFOE,EA/FM,WACnB,MAAwBrC,mBAAS,IAAjC,mBAAOjD,EAAP,KAAagE,EAAb,KACA,EAAgDf,mBAAS,GAAzD,mBAAOsC,EAAP,KAAyBC,EAAzB,KACA,EAAkCvC,oBAAS,GAA3C,mBAAOwC,EAAP,KAAkBC,EAAlB,KACQ/D,EAAWgE,cAAXhE,OACFiB,EAAUC,cAEhBO,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OAFA5B,EAASC,EAAQ0B,EAAgBjC,QAAQmC,KAAKS,GAEvC,kBAAMX,EAAgBG,WAC5B,CAAC7B,IAEJ,IASMiE,EAAgB,WACLnC,OAAOC,QACpB,8DAGA8B,EAAoB,GACpBE,GAAa,IAEb9C,EAAQG,KAAK,MAIXkC,EAAW,WACfS,GAAa,SAACG,GAAD,OAAmBA,MAGlC,OAAI7F,EAAKa,KAEL,0BAASpB,UAAU,YAAnB,UACE,sBAAKA,UAAU,aAAf,UACE,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,cAAC,IAAD,CAAMA,GAAE,iBAAY5C,GAApB,SAA+B3B,EAAKa,OACnC,MACD,4CAEF,+BACI,4BAAIb,EAAKa,OADb,cAGA,8BACKb,EAAKC,MAAM6D,QAAU,EACtB,qBAAKrE,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,mDACA,+EAC+CO,EAAKC,MAAM6D,OAAQ,IADlE,wBAIA,wBAAQrE,UAAU,2BAA2BqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,EAAvB,gBAA5D,4BAMR,qBAAKlC,UAAU,OAAf,SACI,sBAAKA,UAAU,YAAf,UACI,uCACM8F,EAAmB,EADzB,OACgCvF,EAAKC,MAAM6D,UAE1C2B,EACD,cAAC,EAAD,CACIT,YAAahF,EAAKC,MAAMsF,GACxBN,SAAUA,IAGd,cAAC,EAAD,CACID,YAAahF,EAAKC,MAAMsF,GACxBN,SAAUA,EACVG,SAnEL,WACXG,EAAmBvF,EAAKC,MAAM6D,OAAS,GACzC0B,GAAoB,SAACK,GAAD,OAAkBA,EAAe,KACrDH,GAAa,IAEbE,iBAwEK,MC9CIE,EA/CS,SAAC,GAAoC,IAAlC7F,EAAiC,EAAjCA,MAAO0B,EAA0B,EAA1BA,OAAQoE,EAAkB,EAAlBA,YAClCnD,EAAUC,cAEVmD,EAAiB,uCAAG,WAAO7D,GAAP,SAAA7B,EAAA,0DACTmD,OAAOC,QACpB,yDAFsB,gCAKhBpB,EAAWH,GALK,uBAMhB4D,IANgB,OAOtBnD,EAAQG,KAAR,iBAAuBpB,IAPD,2CAAH,sDAWvB,OACE,8BACG1B,EAAM4D,KAAI,SAAC5B,GAAD,OACT,sBAAKxC,UAAU,iBAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,qBAAKA,UAAU,MAAf,SACI,4BAAIwC,EAAKiD,UAEb,qBAAKzF,UAAU,MAAf,SACI,4BAAIwC,EAAKoD,YAGjB,qBAAK5F,UAAU,gBAAf,SACI,sBAAKA,UAAU,0BAAf,UACI,wBACIA,UAAU,2BACVqD,QAAS,kBACLF,EAAQG,KAAR,iBAAuBpB,EAAvB,kBAAuCM,EAAKH,GAA5C,WAHR,kBAQA,wBAAQrC,UAAU,6BAA6BqD,QAAS,kBAAMkD,EAAkB/D,EAAKH,KAArF,2BAnByBG,EAAKH,UCsEnCmE,EAtFS,SAACC,GACvB,IAAQlG,EAAkBkG,EAAlBlG,KAAMgE,EAAYkC,EAAZlC,QACNrC,EAAWgE,cAAXhE,OACFiB,EAAUC,cAEhBO,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OAFA5B,EAASC,EAAQ0B,EAAgBjC,QAAQmC,KAAKS,GAEvC,kBAAMX,EAAgBG,WAC5B,CAAC7B,EAAQqC,IAEZ,IAAMmC,EAAiB,uCAAG,WAAOxE,GAAP,SAAArB,EAAA,0DACTmD,OAAOC,QACpB,yDAFsB,gCAKhB3B,EAAWJ,GALK,OAMtBiB,EAAQG,KAAK,KANS,2CAAH,sDAUjBgD,EAAW,uCAAG,4BAAAzF,EAAA,sEACQoB,EAASC,GADjB,OACZE,EADY,OAElBmC,EAAQnC,GAFU,2CAAH,qDAKjB,OAAI7B,EAAK8B,GAEL,kCACE,sBAAKrC,UAAU,YAAf,UACE,gCACE,sBAAKA,UAAU,kBAAf,UACE,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,+BAAOvE,EAAKa,UAEd,qBAAKpB,UAAU,GAAf,SACE,sBAAKA,UAAU,YAAf,UACE,6BAAKO,EAAKa,OACV,4BAAIb,EAAKyC,cACT,qBAAKhD,UAAU,MAAf,SACI,sBAAKA,UAAU,MAAf,UACI,wBACIA,UAAU,2BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,EAAvB,WAFnB,yBAMA,wBACIlC,UAAU,8BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,EAAvB,YAFnB,gCAMA,wBACIlC,UAAU,8BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,EAAvB,gBAFnB,yBAMA,wBACIlC,UAAU,6BACVqD,QAAS,kBAAMqD,EAAkBxE,IAFrC,uCAWd,oBAAIlC,UAAU,OAAd,mBACA,cAAC,EAAD,CACEQ,MAAOD,EAAKC,MACZ0B,OAAQA,EACRoE,YAAaA,SAMd,MCMIK,EAzFS,SAACF,GACvB,IAAQlG,EAAkBkG,EAAlBlG,KAAMgE,EAAYkC,EAAZlC,QACRpB,EAAUC,cACRlB,EAAWgE,cAAXhE,OAERyB,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OAFA5B,EAASC,EAAQ0B,EAAgBjC,QAAQmC,KAAKS,GAEvC,kBAAMX,EAAgBG,WAC5B,CAAC7B,EAAQqC,IAEZ,IAAMC,EAAgB,SAACC,GACrBF,EAAQ,2BACHhE,GADE,kBAEJkE,EAAMC,OAAOtD,KAAOqD,EAAMC,OAAOC,UAIhCC,EAAa,uCAAG,WAAOH,GAAP,SAAA5D,EAAA,6DACpB4D,EAAMI,iBADc,SAEd1C,EAAW5B,GAFG,OAGpB4C,EAAQG,KAAR,iBAAuBpB,IAHH,2CAAH,sDAMnB,OACE,yBAASlC,UAAU,YAAnB,SACI,gCACI,sBAAKA,UAAU,kBAAf,UACI,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,cAAC,IAAD,CAAMA,GAAE,iBAAY5C,GAApB,SAA+B3B,EAAKa,OACnC,MACD,gDAGJ,uBAAMpB,UAAU,YAAY+E,SAAUH,EAAtC,UACI,qBAAK5E,UAAU,MAAf,SACI,6CAEJ,qCACI,qBAAKA,UAAU,MAAf,SACI,uBAAOgF,QAAQ,OAAf,sBAEJ,qBAAKhF,UAAU,MAAf,SACI,uBACIA,UAAU,eACVqC,GAAG,OACHjB,KAAK,OACL6D,KAAK,OACLC,UAAU,EACVP,MAAOpE,EAAKa,KACZ+D,UAAU,MACVC,SAAUZ,MAGlB,qBAAKxE,UAAU,WAAf,SACI,uBAAOgF,QAAQ,cAAf,6BAEJ,qBAAKhF,UAAU,MAAf,SACI,0BACIA,UAAU,eACVqC,GAAG,cACHjB,KAAK,cACL8D,UAAU,EACVG,KAAK,IACLF,UAAU,MACVR,MAAOpE,EAAKyC,YACZoC,SAAUZ,MAGlB,sBAAKxE,UAAU,WAAf,UACI,wBACIA,UAAU,gCACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,KAF1C,oBAMA,wBAAQlC,UAAU,yBAAyBiF,KAAK,SAAhD,mCCtBT2B,EA1DS,SAACH,GACvB,IACEtD,EAMEsD,EANFtD,QACA0D,EAKEJ,EALFI,UACArE,EAIEiE,EAJFjE,KACAN,EAGEuE,EAHFvE,OACAsC,EAEEiC,EAFFjC,cACAI,EACE6B,EADF7B,cAEF,OACE,sBAAM5E,UAAU,YAAY+E,SAAUH,EAAtC,SACI,qCACI,qBAAK5E,UAAU,MAAf,SACI,uBAAOgF,QAAQ,QAAf,uBAEJ,qBAAKhF,UAAU,MAAf,SACI,0BACIA,UAAU,eACVqC,GAAG,QACHjB,KAAK,QACL8D,UAAU,EACVG,KAAK,IACLF,UAAU,MACVR,MAAOnC,EAAKiD,MACZL,SAAUZ,MAGlB,qBAAKxE,UAAU,WAAf,SACI,uBAAOgF,QAAQ,OAAf,sBAEJ,qBAAKhF,UAAU,MAAf,SACI,0BACIA,UAAU,eACVqC,GAAG,OACHjB,KAAK,OACL8D,UAAU,EACVG,KAAK,IACLF,UAAU,MACVR,MAAOnC,EAAKoD,KACZR,SAAUZ,MAGlB,sBAAKxE,UAAU,WAAf,UACI,wBACIA,UAAU,2BACVqD,QAAS,kBAAMF,EAAQG,KAAR,iBAAuBpB,KAF1C,SAIK2E,EAAY,OAAS,WAE1B,wBAAQ7G,UAAU,8BAA8BiF,KAAK,SAArD,SACK4B,EAAY,OAAS,oBCgB3BC,EA/DQ,SAACL,GACtB,IAAMM,EAAmB,CACvBtB,MAAO,GACPG,KAAM,IAER,EAAwBpC,mBAAS,eAAKuD,IAAtC,mBAAOvE,EAAP,KAAawE,EAAb,KACQzG,EAAkBkG,EAAlBlG,KAAMgE,EAAYkC,EAAZlC,QAERpB,EAAUC,cACRlB,EAAWgE,cAAXhE,OAERyB,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OAFA5B,EAASC,EAAQ0B,EAAgBjC,QAAQmC,KAAKS,GAEvC,kBAAMX,EAAgBG,WAC5B,CAAC7B,EAAQqC,IAEZ,IAOMK,EAAa,uCAAG,WAAOH,GAAP,SAAA5D,EAAA,6DACpB4D,EAAMI,iBADc,SAEdtC,EAAWL,EAAQM,GAFL,OAGpBwE,EAAQ,eAAKD,IAHO,2CAAH,sDAMnB,OAAIxG,EAAKa,KAEH,kCACI,sBAAKpB,UAAU,YAAf,UACI,sBAAKA,UAAU,aAAf,UACI,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,cAAC,IAAD,CAAMA,GAAE,iBAAY5C,GAApB,SAA+B3B,EAAKa,OACnC,MACD,+CAEJ,gCACI,+BACI,4BAAIb,EAAKa,OADb,iBAGA,cAAC,EAAD,CACI+B,QAASA,EACT0D,WAzCJ,EA0CIrE,KAAMA,EACNN,OAAQA,EACRsC,cAjCA,SAACC,GACrBuC,EAAQ,2BACHxE,GADE,kBAEJiC,EAAMC,OAAOtD,KAAOqD,EAAMC,OAAOC,UA+BhBC,cAAeA,YAO5B,MCOIqC,EAlES,SAACR,GACvB,IAIA,EAAwBjD,mBAAS,eAJR,CACvBiC,MAAO,GACPG,KAAM,MAER,mBAAOpD,EAAP,KAAawE,EAAb,KACQzG,EAAkBkG,EAAlBlG,KAAMgE,EAAYkC,EAAZlC,QACRpB,EAAUC,cAChB,EAA2B8C,cAAnBhE,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,OAGhBiB,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OZ+KG,SAAP,oCYjLIqD,CAASxE,EAAQkB,EAAgBjC,QAAQmC,KAAKkD,GAEvC,kBAAMpD,EAAgBG,WAC5B,CAACrB,IAEJiB,qBAAU,WACR,IAAMC,EAAkB,IAAIC,gBAG5B,OAFA5B,EAASC,EAAQ0B,EAAgBjC,QAAQmC,KAAKS,GAEvC,kBAAMX,EAAgBG,WAC5B,CAAC7B,EAAQqC,IAEZ,IAOMK,EAAa,uCAAG,WAAOH,GAAP,SAAA5D,EAAA,6DACpB4D,EAAMI,iBADc,SAEdlC,EAAWH,GAFG,OAGpBW,EAAQG,KAAR,iBAAuBpB,IAHH,2CAAH,sDAMnB,OAAI3B,EAAKa,KAEH,0BAASpB,UAAU,YAAnB,UACQ,sBAAKA,UAAU,aAAf,UACI,cAAC,IAAD,CAAM8E,GAAG,IAAT,kBACC,MACD,cAAC,IAAD,CAAMA,GAAE,iBAAY5C,GAApB,SAA+B3B,EAAKa,OACnC,MACD,8CAAiBsB,QAErB,2CACJ,qBAAK1C,UAAU,gBAAf,SACI,cAAC,EAAD,CACImD,QAASA,EACT0D,WA3CA,EA4CArE,KAAMA,EACNN,OAAQA,EACRsC,cA9BI,SAACC,GACrBuC,EAAQ,2BACHxE,GADE,kBAEJiC,EAAMC,OAAOtD,KAAOqD,EAAMC,OAAOC,UA4BpBC,cAAeA,SAMxB,MCvCIuC,GArBU,WACvB,MAAwB3D,mBAAS,IAAjC,mBAAOjD,EAAP,KAAagE,EAAb,KAEA,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,iBAAlB,SACE,cAAC,EAAD,CAAU9G,KAAMA,EAAMgE,QAASA,MAEjC,cAAC,IAAD,CAAO8C,KAAK,sBAAZ,SACE,cAAC,EAAD,CAAU9G,KAAMA,EAAMgE,QAASA,MAEjC,cAAC,IAAD,CAAO8C,KAAK,2BAAZ,SACE,cAAC,EAAD,CAAS9G,KAAMA,EAAMgE,QAASA,MAEhC,cAAC,IAAD,CAAO8C,KAAK,oCAAZ,SACE,cAAC,EAAD,CAAU9G,KAAMA,EAAMgE,QAASA,UCVxB+C,OAVf,WACE,OACE,wBAAQtH,UAAU,8BAAlB,SACE,qBAAKA,UAAU,uBAAf,SACE,+DCgCOuH,OA5Bf,WACE,OACE,gCACE,cAAC,EAAD,IACA,gCACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOF,KAAK,aAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,uBAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,iBAAZ,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,UACE,cAAC,EAAD,SAGJ,cAAC,GAAD,WCZOG,OAZf,WACE,OACE,qBAAKxH,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqH,KAAK,IAAZ,SACE,cAAC,GAAD,WCRVI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.3d01bd6e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const DeckSnapshot = ({\r\n  deckId,\r\n  name,\r\n  description,\r\n  amount,\r\n  deleteHandler,\r\n}) => {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <h3 className=\"card-title\">{name}</h3>\r\n        <div className>\r\n            <h6>{amount} cards</h6>\r\n        </div>\r\n        <p className=\"card-text\">{description}</p>\r\n        <button\r\n          className=\"btn btn-secondary btn-sm\"\r\n          onClick={() => history.push(`/decks/${deckId}`)}\r\n        >\r\n          View\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary ml-2 btn-sm\"\r\n          onClick={() => history.push(`/decks/${deckId}/study`)}\r\n        >\r\n          Study\r\n        </button>\r\n        <button className=\"btn btn-danger ml-2 btn-sm\" onClick={() => deleteHandler(deckId)}>\r\n          🗑\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckSnapshot;","import React, { useEffect, useState } from \"react\";\r\nimport { listDecks } from \"../utils/api/index.js\";\r\nimport { deleteDeck } from \"../utils/api/index.js\";\r\nimport DeckSnapshot from \"./DeckSnapshot\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const DeckList = () => {\r\n  const [decks, setDecks] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n\r\n    listDecks(abortController.signal).then(setDecks);\r\n\r\n    return () => abortController.abort();\r\n  }, []);\r\n\r\n  const deleteHandler = async (deckId) => {\r\n    const result = window.confirm(\r\n      \"Delete this deck? You will not be able to recover it.\"\r\n    );\r\n    if (result) {\r\n      await deleteDeck(deckId);\r\n      const newDecks = await listDecks();\r\n      setDecks(newDecks);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const list = decks.map((deck) => (\r\n    <DeckSnapshot\r\n      key={deck.id}\r\n      deckId={deck.id}\r\n      name={deck.name}\r\n      description={deck.description}\r\n      amount={deck.cards.length}\r\n      deleteHandler={deleteHandler}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <div className=\"container\">\r\n          <button\r\n            className=\"btn btn-secondary btn-sm mb-2\"\r\n            onClick={() => history.push(`/decks/new`)}\r\n          >\r\n            +Create Deck\r\n          </button>\r\n          <div className>{list}</div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeckList;","import React, { useState } from \"react\";\r\nimport { createDeck } from \"../utils/api/index.js\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\n\r\nexport const DeckCreate = () => {\r\n  const initialDeckState = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n  const [deck, setDeck] = useState({ ...initialDeckState });\r\n  const history = useHistory();\r\n\r\n  const changeHandler = (event) => {\r\n    setDeck({\r\n      ...deck,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    await createDeck(deck);\r\n\r\n    // TODO: send user to Deck screen\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <nav className=\"ml-2 breadcrumb\">\r\n        <Link to=\"/\">Home</Link>\r\n        {\" / \"}\r\n        <span>Create Deck</span>\r\n      </nav>\r\n      <form className=\"card-body\" onSubmit={submitHandler}>\r\n        <div className=\"row\">\r\n          <h3>Create Deck</h3>\r\n        </div>\r\n          <fieldset>\r\n            <div className=\"row\">\r\n              <label htmlFor=\"name\">Name:</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <input\r\n                className=\"form-control\"\r\n                id=\"name\"\r\n                name=\"name\"\r\n                type=\"text\"\r\n                required={true}\r\n                value={deck.name}\r\n                maxLength=\"100\"\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n              <label htmlFor=\"description\">Description:</label>\r\n            </div>\r\n            <div className=\"row\">\r\n              <textarea\r\n                className=\"form-control\"\r\n                id=\"description\"\r\n                name=\"description\"\r\n                required={true}\r\n                rows=\"3\"\r\n                maxLength=\"500\"\r\n                value={deck.description}\r\n                onChange={changeHandler}\r\n              />\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n              <button className=\"btn btn-secondary btn-sm\" onClick={() => history.push(\"/\")}>\r\n                Cancel\r\n              </button>\r\n              <button className=\"btn btn-primary btn-sm ml-2\" type=\"submit\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          </fieldset>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default DeckCreate;","import React from \"react\";\r\n\r\nexport const StudyCardFront = ({ currentCard, flipCard }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>{currentCard.front}</p>\r\n      </div>\r\n      <button className=\"btn btn-secondary btn-sm\" onClick={() => flipCard()}>\r\n        Flip\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudyCardFront;","import React from \"react\";\r\n\r\nexport const StudyCardBack = ({ currentCard, flipCard, nextCard }) => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <p>{currentCard.back}</p>\r\n      </div>\r\n      <div className=\"group-row\">\r\n        <button className=\"btn btn-secondary btn-sm\" onClick={() => flipCard()}>\r\n          Flip\r\n        </button>\r\n        <button className=\"btn btn-primary btn-sm ml-2\" onClick={() => nextCard()}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StudyCardBack;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api/index.js\";\r\nimport StudyCardFront from \"./StudyCardFront\";\r\nimport StudyCardBack from \"./StudyCardBack\";\r\n\r\nexport const Study = () => {\r\n  const [deck, setDeck] = useState([]);\r\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\r\n  const [showFront, setShowFront] = useState(true);\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId]);\r\n\r\n  const nextCard = () => {\r\n    if (currentCardIndex < deck.cards.length - 1) {\r\n      setCurrentCardIndex((currentValue) => currentValue + 1);\r\n      setShowFront(true);\r\n    } else {\r\n      handleRestart();\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    const result = window.confirm(\r\n      \"Restart cards? Click 'cancel' to return to the home page.\"\r\n    );\r\n    if (result) {\r\n      setCurrentCardIndex(0);\r\n      setShowFront(true);\r\n    } else {\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const flipCard = () => {\r\n    setShowFront((currentValue) => !currentValue);\r\n  };\r\n\r\n  if (deck.name) {\r\n    return (\r\n      <section className=\"container\">\r\n        <nav className=\"breadcrumb\">\r\n          <Link to=\"/\">Home</Link>\r\n          {\" / \"}\r\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n          {\" / \"}\r\n          <span>Study</span>\r\n        </nav>\r\n        <h2>\r\n            <i>{deck.name}</i> : Study\r\n        </h2>\r\n        <div>\r\n            {deck.cards.length <= 2 ? (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h3>Not enough cards.</h3>\r\n                    <p>\r\n                    You need at least 3 cards to study. There are {deck.cards.length}{\" \"}\r\n                    cards in this deck\r\n                    </p>\r\n                    <button className=\"btn btn-secondary btn-sm\" onClick={() => history.push(`/decks/${deckId}/cards/new`)}>\r\n                    Add Cards\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            ) : (\r\n            <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h4>\r\n                    Card {currentCardIndex + 1} of {deck.cards.length}\r\n                    </h4>\r\n                    {showFront ? (\r\n                    <StudyCardFront\r\n                        currentCard={deck.cards[currentCardIndex]}\r\n                        flipCard={flipCard}\r\n                    />\r\n                    ) : (\r\n                    <StudyCardBack\r\n                        currentCard={deck.cards[currentCardIndex]}\r\n                        flipCard={flipCard}\r\n                        nextCard={nextCard}\r\n                    />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )}\r\n        </div>\r\n      </section>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Study;","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { deleteCard } from \"../utils/api/index.js\";\r\n\r\nexport const CardList = ({ cards, deckId, refreshDeck }) => {\r\n  const history = useHistory();\r\n\r\n  const cardDeleteHandler = async (cardId) => {\r\n    const result = window.confirm(\r\n      \"Delete this card? You will not be able to recover it.\"\r\n    );\r\n    if (result) {\r\n      await deleteCard(cardId);\r\n      await refreshDeck();\r\n      history.push(`/decks/${deckId}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {cards.map((card) => (\r\n        <div className=\"container card\" key={card.id}>\r\n            <div className=\"row card-body\">\r\n                <div className=\"col\">\r\n                    <p>{card.front}</p>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <p>{card.back}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row card-body\">\r\n                <div className=\"col justify-content-end\">\r\n                    <button\r\n                        className=\"btn btn-secondary btn-sm\"\r\n                        onClick={() =>\r\n                            history.push(`/decks/${deckId}/cards/${card.id}/edit`)\r\n                        }\r\n                    >\r\n                        Edit\r\n                    </button>\r\n                    <button className=\"btn btn-danger btn-sm ml-2\" onClick={() => cardDeleteHandler(card.id)}>\r\n                        Delete\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;","import React, { useEffect } from \"react\";\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck } from \"../utils/api/index.js\";\r\nimport CardList from \"./CardList\";\r\n\r\nexport const DeckView = (props) => {\r\n  const { deck, setDeck } = props;\r\n  const { deckId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setDeck]);\r\n\r\n  const deckDeleteHandler = async (deckId) => {\r\n    const result = window.confirm(\r\n      \"Delete this deck? You will not be able to recover it.\"\r\n    );\r\n    if (result) {\r\n      await deleteDeck(deckId);\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  const refreshDeck = async () => {\r\n    const updatedDeck = await readDeck(deckId);\r\n    setDeck(updatedDeck);\r\n  };\r\n\r\n  if (deck.id) {\r\n    return (\r\n      <section>\r\n        <div className=\"container\">\r\n          <div>\r\n            <nav className=\"breadcrumb ml-2\">\r\n              <Link to=\"/\">Home</Link>\r\n              {\" / \"}\r\n              <span>{deck.name}</span>\r\n            </nav>\r\n            <div className=\"\">\r\n              <div className=\"card-body\">\r\n                <h3>{deck.name}</h3>\r\n                <p>{deck.description}</p>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <button\r\n                            className=\"btn btn-secondary btn-sm\"\r\n                            onClick={() => history.push(`/decks/${deckId}/edit`)}\r\n                            >\r\n                            ✎ Edit\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary btn-sm ml-2\"\r\n                            onClick={() => history.push(`/decks/${deckId}/study`)}\r\n                            >\r\n                            🕮 Study\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-primary btn-sm ml-2\"\r\n                            onClick={() => history.push(`/decks/${deckId}/cards/new`)}\r\n                            >\r\n                            + Add Cards\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-danger btn-sm ml-2\"\r\n                            onClick={() => deckDeleteHandler(deckId)}\r\n                            >\r\n                            🗑\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <h2 className=\"mt-4\">Cards</h2>\r\n          <CardList\r\n            cards={deck.cards}\r\n            deckId={deckId}\r\n            refreshDeck={refreshDeck}\r\n          />\r\n        </div>\r\n      </section>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default DeckView;","import React, { useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { readDeck, updateDeck } from \"../utils/api/index.js\";\r\n\r\nexport const EditDeck = (props) => {\r\n  const { deck, setDeck } = props;\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setDeck]);\r\n\r\n  const changeHandler = (event) => {\r\n    setDeck({\r\n      ...deck,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    await updateDeck(deck);\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  return (\r\n    <section className=\"container\">\r\n        <div>\r\n            <nav className=\"ml-2 breadcrumb\">\r\n                <Link to=\"/\">Home</Link>\r\n                {\" / \"}\r\n                <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                {\" / \"}\r\n                <span>Edit Deck</span>\r\n            </nav>\r\n            \r\n            <form className=\"card-body\" onSubmit={submitHandler}>\r\n                <div className=\"row\">\r\n                    <h2>Edit Deck</h2>\r\n                </div>\r\n                <fieldset>\r\n                    <div className=\"row\">\r\n                        <label htmlFor=\"name\">Name :</label>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <input\r\n                            className=\"form-control\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            type=\"text\"\r\n                            required={true}\r\n                            value={deck.name}\r\n                            maxLength=\"100\"\r\n                            onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row mt-2\">\r\n                        <label htmlFor=\"description\">Description :</label>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <textarea\r\n                            className=\"form-control\"\r\n                            id=\"description\"\r\n                            name=\"description\"\r\n                            required={true}\r\n                            rows=\"3\"\r\n                            maxLength=\"500\"\r\n                            value={deck.description}\r\n                            onChange={changeHandler}\r\n                        />\r\n                    </div>\r\n                    <div className=\"row mt-3\">\r\n                        <button\r\n                            className=\"btn btn-secondary btn-sm mr-2\"\r\n                            onClick={() => history.push(`/decks/${deckId}`)}\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button className=\"btn btn-primary btn-sm\" type=\"submit\">\r\n                            Submit\r\n                        </button>\r\n                    </div>\r\n                </fieldset>\r\n            </form>\r\n        </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default EditDeck;","import React from \"react\";\r\n\r\nexport const CardForm = (props) => {\r\n  const {\r\n    history,\r\n    isNewCard,\r\n    card,\r\n    deckId,\r\n    changeHandler,\r\n    submitHandler,\r\n  } = props;\r\n  return (\r\n    <form className=\"container\" onSubmit={submitHandler}>\r\n        <fieldset>\r\n            <div className=\"row\">\r\n                <label htmlFor=\"front\">Front :</label>\r\n            </div>\r\n            <div className=\"row\">\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    id=\"front\"\r\n                    name=\"front\"\r\n                    required={true}\r\n                    rows=\"3\"\r\n                    maxLength=\"300\"\r\n                    value={card.front}\r\n                    onChange={changeHandler}\r\n                />\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <label htmlFor=\"back\">Back :</label>\r\n            </div>\r\n            <div className=\"row\">\r\n                <textarea\r\n                    className=\"form-control\"\r\n                    id=\"back\"\r\n                    name=\"back\"\r\n                    required={true}\r\n                    rows=\"3\"\r\n                    maxLength=\"300\"\r\n                    value={card.back}\r\n                    onChange={changeHandler}\r\n                />\r\n            </div>\r\n            <div className=\"row mt-3\">\r\n                <button\r\n                    className=\"btn btn-secondary btn-sm\"\r\n                    onClick={() => history.push(`/decks/${deckId}`)}\r\n                >\r\n                    {isNewCard ? \"Done\" : \"Cancel\"}\r\n                </button>\r\n                <button className=\"btn btn-primary btn-sm ml-2\" type=\"submit\">\r\n                    {isNewCard ? \"Save\" : \"Submit\"}\r\n                </button>\r\n            </div>\r\n        </fieldset>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CardForm;","import React, { useState, useEffect } from \"react\";\r\nimport { createCard, readDeck } from \"../utils/api/index.js\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport CardForm from \"./CardForm.js\";\r\n\r\nexport const AddCard = (props) => {\r\n  const initialCardState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [card, setCard] = useState({ ...initialCardState });\r\n  const { deck, setDeck } = props;\r\n  const isNewCard = true;\r\n  const history = useHistory();\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setDeck]);\r\n\r\n  const changeHandler = (event) => {\r\n    setCard({\r\n      ...card,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    await createCard(deckId, card);\r\n    setCard({ ...initialCardState });\r\n  };\r\n\r\n  if (deck.name) {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <nav className=\"breadcrumb\">\r\n                    <Link to=\"/\">Home</Link>\r\n                    {\" / \"}\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                    {\" / \"}\r\n                    <span>Add Card</span>\r\n                </nav>\r\n                <div>\r\n                    <h2>\r\n                        <i>{deck.name}</i> : Add Card\r\n                    </h2>\r\n                    <CardForm\r\n                        history={history}\r\n                        isNewCard={isNewCard}\r\n                        card={card}\r\n                        deckId={deckId}\r\n                        changeHandler={changeHandler}\r\n                        submitHandler={submitHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default AddCard;","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { readCard, updateCard, readDeck } from \"../utils/api/index.js\";\r\nimport CardForm from \"./CardForm.js\";\r\n\r\nexport const EditCard = (props) => {\r\n  const initialCardState = {\r\n    front: \"\",\r\n    back: \"\",\r\n  };\r\n  const [card, setCard] = useState({ ...initialCardState });\r\n  const { deck, setDeck } = props;\r\n  const history = useHistory();\r\n  const { deckId, cardId } = useParams();\r\n  const isNewCard = false;\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readCard(cardId, abortController.signal).then(setCard);\r\n\r\n    return () => abortController.abort();\r\n  }, [cardId]);\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck);\r\n\r\n    return () => abortController.abort();\r\n  }, [deckId, setDeck]);\r\n\r\n  const changeHandler = (event) => {\r\n    setCard({\r\n      ...card,\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const submitHandler = async (event) => {\r\n    event.preventDefault();\r\n    await updateCard(card);\r\n    history.push(`/decks/${deckId}`);\r\n  };\r\n\r\n  if (deck.name) {\r\n    return (\r\n        <section className=\"container\">\r\n                <nav className=\"breadcrumb\">\r\n                    <Link to=\"/\">Home</Link>\r\n                    {\" / \"}\r\n                    <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n                    {\" / \"}\r\n                    <span>Edit Card {cardId}</span>\r\n                </nav>\r\n                <h2>Edit Card</h2>\r\n            <div className=\"row card-body\">\r\n                <CardForm\r\n                    history={history}\r\n                    isNewCard={isNewCard}\r\n                    card={card}\r\n                    deckId={deckId}\r\n                    changeHandler={changeHandler}\r\n                    submitHandler={submitHandler}\r\n                />\r\n            </div>\r\n        </section>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default EditCard;","import React, { useState } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport DeckView from \"./DeckView\";\r\nimport EditDeck from \"./EditDeck\";\r\nimport AddCard from \"./AddCard\";\r\nimport EditCard from \"./EditCard\";\r\n\r\nexport const DeckIndex = () => {\r\n  const [deck, setDeck] = useState([]);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/decks/:deckId\">\r\n        <DeckView deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n      <Route path=\"/decks/:deckId/edit\">\r\n        <EditDeck deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n      <Route path=\"/decks/:deckId/cards/new\">\r\n        <AddCard deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n      <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n        <EditCard deck={deck} setDeck={setDeck} />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default DeckIndex;","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"jumbotron bg-dark mt-3 mb-0\">\r\n      <div className=\"container text-white\">\r\n        <h6>Flashcard-o-matic ™</h6>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport { Route, Switch } from \"react-router-dom\";\nimport DeckList from \"../home/DeckList\";\nimport DeckCreate from \"../home/DeckCreate\";\nimport Study from \"../study/Study\";\nimport DeckIndex from \"../deck/DeckIndex.js\";\nimport Footer from \"./Footer\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div>\n        <Switch>\n          <Route path=\"/decks/new\">\n            <DeckCreate />\n          </Route>\n          <Route exact path=\"/\">\n            <DeckList />\n          </Route>\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <DeckIndex />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}